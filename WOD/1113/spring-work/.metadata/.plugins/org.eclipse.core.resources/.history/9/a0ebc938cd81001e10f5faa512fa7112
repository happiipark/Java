package com.kosta.bank.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.kosta.bank.dto.Account;
import com.kosta.bank.service.AccountService;

@RestController	
public class AccountController {
	
    @Autowired
    private AccountService accountService;
    
    @GetMapping("/")
    public String main(){
        return "main";
    }

    @GetMapping("/makeaccount")
    public String makeAccount(){
        return "makeaccount";
    }

    @PostMapping("/makeaccount")
    public ResponseEntity<String> makeAccount(@RequestBody Account acc){
    	try {
    		accountService.makeAccount(acc);
    		return new ResponseEntity<String>("계좌가 개설되었습니다",HttpStatus.OK);
    	} catch (Exception e) {
    		e.printStackTrace();
    		return new ResponseEntity<String>(e.getMessage(),HttpStatus.BAD_REQUEST);
    	}
    	
    }
    
    
    @GetMapping("/deposit")
    public String deposit(){
        return "deposit";
    }

    @PostMapping("/deposit")
    public String deposit(@RequestParam String id, @RequestParam Integer balance, Model model){
        try{
            // 계좌 조회
            Account acc = accountService.selectAccount(id);

            // 출금 로직 진행 및 param 생성
            acc.setBalance(acc.getBalance()+balance);
            // 금액 업데이트 진행
            accountService.updateAccountBalance(id,acc.getBalance());
            model.addAttribute("acc", acc);
            return "accountinfo";
        }catch (Exception e){
            e.printStackTrace();
            System.out.println(e.getMessage());
            System.out.println(e.getCause());
            model.addAttribute("err", "에러 발생");
            return "error";
        }
    }

    @GetMapping("/withdraw")
    public String withdraw(){
        return "withdraw";
    }

    @PostMapping("/withdraw")
    public String withdraw(@RequestParam String id, @RequestParam Integer balance, Model model){
        try{
            // 계좌 조회
            Account acc = accountService.selectAccount(id);

            // 출금 로직 진행 및 param 생성
            acc.setBalance(acc.getBalance()-balance);
            // 금액 업데이트
            accountService.updateAccountBalance(id,acc.getBalance());

            model.addAttribute("acc", acc);
            return "accountinfo";
        }catch (Exception e){
            e.printStackTrace();
            System.out.println(e.getMessage());
            System.out.println(e.getCause());
            model.addAttribute("err", "에러 발생");
            return "error";
        }
    }

    @GetMapping("/accountinfo/{id}")
    public ResponseEntity<Account> accountInfo(@PathVariable String id){
        try {
        	Account acc = accountService.accountInfO(id);
        	return new ResponseEntity<Account>(acc, HttpStatus.OK);
        } catch( Exception e) {
        	e.printStackTrace();
        	return new ResponseEntity<Account>(HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/accountinfo")
    public String accounInfo(@RequestParam("id") String id, Model model){
        try{
            Account acc = accountService.selectAccount(id);
            model.addAttribute("acc", acc);
            return "accountinfo";
        }catch (Exception e){
            e.printStackTrace();
            System.out.println(e.getMessage());
            System.out.println(e.getCause());
            model.addAttribute("err", e.getMessage());
            return "accountinfo";
        }
    }

    @GetMapping("/allaccountinfo")
    public ModelAndView allAccountInfo( ){
        ModelAndView mav = new ModelAndView();
    	try{
            List<Account> accs = accountService.selectAccountList();
            mav.addObject("accs",accs);
            mav.setViewName("allaccountinfo");
        }catch (Exception e){
            e.printStackTrace();
            System.out.println(e.getMessage());
            System.out.println(e.getCause());
            mav.addObject("err", "에러 발생");
            mav.setViewName("error");
        }
        return mav;
    }
}
